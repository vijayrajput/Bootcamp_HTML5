/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "com/sap/sdc/hcp/bootcamp/Component-preload",
	"modules": {
		"com/sap/sdc/hcp/bootcamp/model/GroupSortState.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\",\n\t\t\"sap/ui/model/Sorter\"\n\t], function (BaseObject, Sorter) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"com.sap.sdc.hcp.bootcamp.model.GroupSortState\", {\n\n\t\t/**\n\t\t * Creates sorters and groupers for the master list.\n\t\t * Since grouping also means sorting, this class modifies the viewmodel.\n\t\t * If a user groups by a field, and there is a corresponding sort option, the option will be chosen.\n\t\t * If a user ungroups, the sorting will be reset to the default sorting.\n\t\t * @class\n\t\t * @public\n\t\t * @param {sap.ui.model.json.JSONModel} oViewModel the model of the current view\n\t\t * @param {function} fnGroupFunction the grouping function to be applied\n\t\t * @alias com.sap.sdc.hcp.bootcamp.model.GroupSortState\n\t\t */\n\t\tconstructor: function (oViewModel, fnGroupFunction) {\n\t\t\tthis._oViewModel = oViewModel;\n\t\t\tthis._fnGroupFunction = fnGroupFunction;\n\t\t},\n\n\t\t/**\n\t\t * Sorts by DESCRIPTION, or by RemainingTime\n\t\t *\n\t\t * @param {string} sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tsort: function (sKey) {\n\t\t\tvar sGroupedBy = this._oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupedBy !== \"None\") {\n\t\t\t\t// If the list is grouped, remove the grouping since the user wants to sort by something different\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping - the first sorten contains a grouper function\n\t\t\t\tthis._oViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\treturn [new Sorter(sKey, false)];\n\t\t},\n\n\t\t/**\n\t\t * Groups by RemainingTime, or resets the grouping for the key \"None\"\n\t\t *\n\t\t * @param {string} sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tgroup: function (sKey) {\n\t\t\tvar aSorters = [];\n\n\t\t\tif (sKey === \"RemainingTime\") {\n\t\t\t\t// Grouping means sorting so we set the select to the same Entity used for grouping\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"RemainingTime\");\n\n\t\t\t\taSorters.push(\n\t\t\t\t\tnew Sorter(\"RemainingTime\", false,\n\t\t\t\t\t\tthis._fnGroupFunction.bind(this))\n\t\t\t\t);\n\t\t\t} else if (sKey === \"None\") {\n\t\t\t\t// select the default sorting again\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"DESCRIPTION\");\n\t\t\t}\n\n\t\t\treturn aSorters;\n\t\t}\n\n\t});\n});",
		"com/sap/sdc/hcp/bootcamp/model/grouper.js": "sap.ui.define([\r\n\t], function () {\r\n\t\t\"use strict\";\r\n\r\n\t\t/*\r\n\t\t * Use this file to implement your custom grouping functions\r\n\t\t * The predefined functions are simple examples and might be replaced by your more complex implementations\r\n\t\t * to be called with .bind() and handed over to a sap.ui.model.Sorter\r\n\t\t * return value for all your functions is an object with  key-text pairs\r\n\t\t * the oContext parameter is not under your control!\r\n\t\t */\r\n\r\n\t\treturn {\r\n\r\n\t\t/**\r\n\t\t * Groups the items by a price in two groups: Lesser equal than 20 and greater than 20\r\n\t\t * This grouping function needs the resource bundle so we pass it as a dependency\r\n\t\t * @param oResourceBundle {sap.ui.model.resource.ResourceModel} the resource bundle of your i18n model\r\n\t\t * @returns {Function} the grouper function you can pass to your sorter\r\n\t\t */\r\n\t\tgroupUnitNumber : function (oResourceBundle) {\r\n\t\t\treturn function (oContext) {\r\n\t\t\t\tvar iPrice = oContext.getProperty(\"RemainingTime\"),\r\n\t\t\t\t\tsKey,\r\n\t\t\t\t\tsText;\r\n\r\n\t\t\t\t\tif (iPrice <= 20) {\r\n\t\t\t\t\t\tsKey = \"LE20\";\r\n\t\t\t\t\t\tsText = oResourceBundle.getText(\"masterGroup1Header1\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsKey = \"GT20\";\r\n\t\t\t\t\t\tsText = oResourceBundle.getText(\"masterGroup1Header2\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tkey: sKey,\r\n\t\t\t\t\t\ttext: sText\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t}\r\n);",
		"com/sap/sdc/hcp/bootcamp/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\t\t/**\n\t\t * Rounds the currency value to 2 digits\n\t\t *\n\t\t * @public\n\t\t * @param {string} sValue value to be formatted\n\t\t * @returns {string} formatted currency value with 2 digits\n\t\t */\n\t\tcurrencyValue: function(sValue) {\n\t\t\tif (!sValue || sValue===0) {\n\t\t\t\treturn \".\";\n\t\t\t}\n\n\t\t\treturn sValue;\n\t\t},\n\t\t// ***************************************************************************************************\n\t\t// Start of Custom code \n\t\t// ***************************************************************************************************\t\t\t\n\t\t/**\n\t\t * Rounds the number unit value to 2 digits\n\t\t * @public\n\t\t * @param {string} sValue the number string to be rounded\n\t\t * @returns {string} sValue with 2 digits rounded\n\t\t */\n\t\tnumberUnit: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"0\";\n\t\t\t}\n\t\t\treturn sValue;\n\t\t},\n\t\tlinkFormat: function(sValue) {\n\t\t\tif (sValue) {\n\t\t\t\t//return \"https://www.ets.org/Media/Tests/TOEFL/pdf/SampleQuestions.pdf\"+value;}\n\t\t\t\t//var oRootPath = this.getView().getModel(\"device\").getProperty(\"/rootPath\");\n\t\t\t\treturn \"/destinations/BootCampDestination/JobEnrollmentDemo/DocManagement?type=cv&empid=\" + sValue;\n\t\t\t}\n\t\t}\n\t\t// ***************************************************************************************************\n\t\t// End of Custom code \n\t\t// ***************************************************************************************************\t\t\t\t\n\t};\n\n});",
		"com/sap/sdc/hcp/bootcamp/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"com/sap/sdc/hcp/bootcamp/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t'sap/viz/ui5/controls/common/feeds/FeedItem',\n\t'sap/viz/ui5/data/FlattenedDataset',\n\t'sap/ui/model/Filter',\n\t\"com/sap/sdc/hcp/bootcamp/model/formatter\"\n], function(BaseController, JSONModel, FeedItem, FlattenedDataset, Filter, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.sap.sdc.hcp.bootcamp.controller.Detail\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\")\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\n\t\t\t// ***************************************************************************************************\n\t\t\t// Start of Custom code for graph\n\t\t\t// *****************************************************************************************************\t\t\n\n\t\t\tvar oVizFrame = this.getView().byId(\"idVizFrameDonut\");\n\t\t\toVizFrame.setVizType('donut');\n\t\t\toVizFrame.setUiConfig({\n\t\t\t\t\"applicationSet\": \"fiori\"\n\t\t\t});\n\n\t\t\tvar oPopOver = this.getView().byId(\"idPopOver\");\n\t\t\toPopOver.connect(oVizFrame.getVizUid());\n\n\t\t\tvar oDataset = new FlattenedDataset({\n\t\t\t\tdimensions: [{\n\t\t\t\t\tname: \"LOCATION\",\n\t\t\t\t\tvalue: \"{LOCATION}\"\n\t\t\t\t}],\n\t\t\t\tmeasures: [{\n\t\t\t\t\tname: \"COUNT\",\n\t\t\t\t\tvalue: \"{Count}\"\n\t\t\t\t}],\n\t\t\t\tdata: {\n\t\t\t\t\tpath: \"AnalyticDetails\"\n\t\t\t\t}\n\t\t\t});\n\t\t\toVizFrame.setVizProperties({\n\t\t\t\tlegend: {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\ttext: this.getResourceBundle().getText(\"detailChartlegend\")\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\tvisible: true,\n\t\t\t\t\ttext: this.getResourceBundle().getText(\"detailChartTitle\")\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toVizFrame.setDataset(oDataset);\n\t\t\t\n\n\t\t\tvar feedSize = new FeedItem({\n\t\t\t\t\t'uid': \"size\",\n\t\t\t\t\t'type': \"Measure\",\n\t\t\t\t\t'values': [\"COUNT\"]\n\t\t\t\t}),\n\t\t\t\tfeedColor = new FeedItem({\n\t\t\t\t\t'uid': \"color\",\n\t\t\t\t\t'type': \"Dimension\",\n\t\t\t\t\t'values': [\"LOCATION\"]\n\t\t\t\t});\n\t\t\toVizFrame.addFeed(feedSize);\n\t\t\toVizFrame.addFeed(feedColor);\n\n\t\t\t// ***************************************************************************************************\n\t\t\t// End of Custom code\n\t\t\t// *****************************************************************************************************\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareEmailPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\tsap.m.URLHelper.triggerEmail(\n\t\t\t\tnull,\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Event handler when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareInJamPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"),\n\t\t\t\toShareDialog = sap.ui.getCore().createComponent({\n\t\t\t\t\tname: \"sap.collaboration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\toShareDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpdateFinished: function(oEvent) {\n\t\t\tvar sTitle,\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this.byId(\"lineItemsList\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar sObjectId = oEvent.getParameter(\"arguments\").objectId;\n\t\t\tthis.getModel().metadataLoaded().then(function() {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"Jobs\", {\n\t\t\t\t\tJOBID: sObjectId\n\t\t\t\t});\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_onBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oElementBinding.getPath(),\n\t\t\t\toResourceBundle = this.getResourceBundle(),\n\t\t\t\toObject = oView.getModel().getObject(sPath),\n\t\t\t\tsObjectId = oObject.JOBID,\n\t\t\t\tsObjectName = oObject.DESCRIPTION,\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareOnJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\",\n\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\",\n\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n\t\t},\n\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\toLineItemTable = this.byId(\"lineItemsList\"),\n\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t}\n\n\t\t// ***************************************************************************************************\n\t\t// Start of Custom function code\n\t\t// *****************************************************************************************************\n\t\t,\n\t\tlinkOnCalenderPress: function(value) {\n\n\t\t\tvar source = value.getSource();\n\t\t\tvar personId = source.getCustomData()[0].getValue();\n\t\t\tvar jobId = source.getCustomData()[1].getValue();\n\t\t\t// Path Need to change to Java Application.\n\t\t\tvar url = 'https://googlei044067trial.hanatrial.ondemand.com/JobEnrollmentDemo/GoogleAccess?title=Interview with ' + personId;\n\t\t\tvar googleWindow = window.open(url, \"Google Page\", \"width=480,height=585,top=100,left=300,location=no\");\n\n\t\t\t//var oRootPath = this.getView().getModel(\"device\").getProperty(\"/rootPath\");\n\t\t\tvar url = \"/destinations/BootCampDestination/JobEnrollmentDemo/MailServlet?personid=\" + personId + \"&jobid=\" + jobId;\n\n\t\t\t$\n\t\t\t\t.ajax({\n\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\turl: url,\n\t\t\t\t\tdata: \"\",\n\t\t\t\t\tasync: true,\n\t\t\t\t\tdatatype: \"json\",\n\t\t\t\t\tcontenttype: \"application/json\",\n\t\t\t\t\tsuccess: function(resp) {\n\t\t\t\t\t\talert(\"Email Successfully Sent\");\n\n\t\t\t\t\t},\n\t\t\t\t\terror: function(e) {\n\t\t\t\t\t\talert(\"Error while sending email\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t}\n\n\t}\n\t);\n\n});",
		"com/sap/sdc/hcp/bootcamp/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\"sap/ui/core/routing/History\"\n\t], function (Controller, History) {\n\t\t\"use strict\";\n\n\t\treturn Controller.extend(\"com.sap.sdc.hcp.bootcamp.controller.BaseController\", {\n\t\t\t/**\n\t\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t\t */\n\t\t\tgetRouter : function () {\n\t\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t\t */\n\t\t\tgetModel : function (sName) {\n\t\t\t\treturn this.getView().getModel(sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t\t */\n\t\t\tsetModel : function (oModel, sName) {\n\t\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the resource bundle.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t\t */\n\t\t\tgetResourceBundle : function () {\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler  for navigating back.\n\t\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t\t// The history contains a previous entry\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\t\tvar bReplace = true;\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"com/sap/sdc/hcp/bootcamp/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"com/sap/sdc/hcp/bootcamp/model/formatter\",\n\t\"com/sap/sdc/hcp/bootcamp/model/grouper\",\n\t\"com/sap/sdc/hcp/bootcamp/model/GroupSortState\"\n], function(BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter, grouper, GroupSortState) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.sap.sdc.hcp.bootcamp.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function() {\n\t\t\t// Control state model\n\t\t\tvar oList = this.byId(\"list\"),\n\t\t\t\toViewModel = this._createViewModel(),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\n\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\n\t\t\tthis._oGroupSortState = new GroupSortState(oViewModel, grouper.groupUnitNumber(this.getResourceBundle()));\n\n\t\t\tthis._oList = oList;\n\t\t\t// keeps the filter and search state\n\t\t\tthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function() {\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\n\t\t\t\tthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"DESCRIPTION\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\n\t\tonSort: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey();\n\t\t\tif (sKey === 'RemainingTime') {\n\t\t\t\tsKey = 'VALID_TILL';\n\t\t\t}\n\t\t\tvar aSorters = this._oGroupSortState.sort(sKey);\n\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the grouper selection.\n\t\t * @param {sap.ui.base.Event} oEvent the search field event\n\t\t * @public\n\t\t */\n\t\tonGroup: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\taSorters = this._oGroupSortState.group(sKey);\n\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the filter button to open the ViewSettingsDialog.\n\t\t * which is used to add or remove filters to the master list. This\n\t\t * handler method is also called when the filter bar is pressed,\n\t\t * which is added to the beginning of the master list when a filter is applied.\n\t\t * @public\n\t\t */\n\t\tonOpenViewSettings: function() {\n\t\t\tif (!this._oViewSettingsDialog) {\n\t\t\t\tthis._oViewSettingsDialog = sap.ui.xmlfragment(\"com.sap.sdc.hcp.bootcamp.view.ViewSettingsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oViewSettingsDialog);\n\t\t\t\t// forward compact/cozy style into Dialog\n\t\t\t\tthis._oViewSettingsDialog.addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\t\t\tthis._oViewSettingsDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Event handler called when ViewSettingsDialog has been confirmed, i.e.\n\t\t * has been closed with 'OK'. In the case, the currently chosen filters\n\t\t * are applied to the master list, which can also mean that the currently\n\t\t * applied filters are removed from the master list, in case the filter\n\t\t * settings are removed in the ViewSettingsDialog.\n\t\t * @param {sap.ui.base.Event} oEvent the confirm event\n\t\t * @public\n\t\t */\n\t\tonConfirmViewSettingsDialog: function(oEvent) {\n\t\t\tvar aFilterItems = oEvent.getParameters().filterItems,\n\t\t\t\taFilters = [],\n\t\t\t\taCaptions = [];\n\n\t\t\t// update filter state:\n\t\t\t// combine the filter array and the filter string\n\t\t\taFilterItems.forEach(function(oItem) {\n\t\t\t\tswitch (oItem.getKey()) {\n\t\t\t\t\tcase \"Filter1\":\n\t\t\t\t\t\taFilters.push(new Filter(\"RemainingTime\", FilterOperator.LE, 100));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Filter2\":\n\t\t\t\t\t\taFilters.push(new Filter(\"RemainingTime\", FilterOperator.GT, 100));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\taCaptions.push(oItem.getText());\n\t\t\t});\n\n\t\t\tthis._oListFilterState.aFilter = aFilters;\n\t\t\tthis._updateFilterBar(aCaptions.join(\", \"));\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\t\t * @override\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#Shell-home\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t_createViewModel: function() {\n\t\t\treturn new JSONModel({\n\t\t\t\tisFilterBarVisible: false,\n\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\tdelay: 0,\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\tsortBy: \"DESCRIPTION\",\n\t\t\t\tgroupBy: \"None\"\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {\n\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"JOBID\");\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\t\t\tobjectId: sObjectId\n\t\t\t\t\t}, true);\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t}.bind(this)\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tobjectId: oItem.getBindingContext().getProperty(\"JOBID\")\n\t\t\t}, bReplace);\n\t\t},\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateFilterBar: function(sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t}\n\n\t});\n\n});",
		"com/sap/sdc/hcp/bootcamp/view/Detail.view.xml": "<!-- Add sap.ui.core libarary-->\n<mvc:View controllerName=\"com.sap.sdc.hcp.bootcamp.controller.Detail\" xmlns:core=\"sap.ui.core\" xmlns:footerbar=\"sap.ushell.ui.footerbar\"\n\txmlns:mvc=\"sap.ui.core.mvc\" xmlns:semantic=\"sap.m.semantic\" xmlns:viz=\"sap.viz.ui5.controls\" xmlns=\"sap.m\">\n\t<semantic:DetailPage busy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\" id=\"page\" navButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"{device>/system/phone}\" title=\"{i18n>detailTitle}\">\n\t\t<semantic:content>\n\t\t\t<!-- Custom Code -->\n\t\t\t<!-- Change formatter from '.formatter.currencyValue' to '.formatter.numberUnit' -->\n\t\t\t<ObjectHeader id=\"objectHeader\" number=\"{ path: 'RemainingTime', formatter: '.formatter.numberUnit' }\" numberUnit=\"{RemainingTimeUnit}\"\n\t\t\t\ttitle=\"{DESCRIPTION}\"></ObjectHeader>\n\t\t\t<IconTabBar class=\"sapUiResponsiveContentPadding\" id=\"iconTabBar\">\n\t\t\t\t<items>\n\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t<!--Change icon and add key-->\n\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://activity-items\" id=\"iconTabBarFilter1\" key=\"applicant\" tooltip=\"{i18n>detailIconTabBarInfo}\">\n\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t<!--Move Below Table node as Content for IconTabFilter-->\n\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t<Table busyIndicatorDelay=\"{detailView>/lineItemTableDelay}\" class=\"sapUiResponsiveMargin\" id=\"lineItemsList\" items=\"{EnrollmentDetails}\"\n\t\t\t\t\t\t\t\tnoDataText=\"{i18n>detailLineItemTableNoDataText}\" updateFinished=\"onListUpdateFinished\" width=\"auto\">\n\t\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t\t<Toolbar id=\"lineItemsToolbar\">\n\t\t\t\t\t\t\t\t\t\t<Title id=\"lineItemsHeader\" text=\"{detailView>/lineItemListTitle}\"/>\n\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t<!--Column for Applicant Image-->\n\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t<Column width=\"4rem\"/>\n\t\t\t\t\t\t\t\t\t<Column>\n\t\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>detailLineItemTableIDColumn}\"/>\n\t\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t<!--Column for Download Resume-->\n\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\" width=\"8rem\"/>\n\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t<!--Column for Applicant Contact-->\n\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t<Column demandPopin=\"true\" minScreenWidth=\"Tablet\" width=\"13rem\"/>\n\t\t\t\t\t\t\t\t\t<Column demandPopin=\"true\" hAlign=\"Right\" minScreenWidth=\"Tablet\">\n\t\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>detailLineItemTableUnitNumberColumn}\"/>\n\t\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t</columns>\n\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t<ColumnListItem>\n\t\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t\t\t<!--Applicant Image-->\n\t\t\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t\t\t<Image densityAware=\"false\" src=\"/destinations/BootCampDestination/JobEnrollmentDemo/DocManagement?type=pic&amp;empid={PERSONID}\"\n\t\t\t\t\t\t\t\t\t\t\t\twidth=\"2rem\"></Image>\n\t\t\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t\t\t<!--Add Last Name in binding-->\n\t\t\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t\t\t<ObjectIdentifier text=\"{PERSONID}\" title=\"{FIRST_NAME} {LAST_NAME}\"/>\n\t\t\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t\t\t<!--Resume Download-->\n\t\t\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t\t\t<Link href=\"{path: 'PERSONID', formatter:'.formatter.linkFormat'}\" press=\"linkOnPress\" target=\"_top\"\n\t\t\t\t\t\t\t\t\t\t\t\ttext=\"{i18n>detailLineItemTableDownloadCV}\"/>\n\t\t\t\t\t\t\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t\t\t\t\t\t\t<!--Schedule Interview Download-->\n\t\t\t\t\t\t\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t\t\t\t\t\t\t<Link press=\"linkOnCalenderPress\" target=\"_top\" text=\"{i18n>detailLineItemTableNotification}\">\n\t\t\t\t\t\t\t\t\t\t\t\t<customData>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<core:CustomData key=\"empId\" value=\"{PERSONID}\"></core:CustomData>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<core:CustomData key=\"jobId\" value=\"{JOBID}\"></core:CustomData>\n\t\t\t\t\t\t\t\t\t\t\t\t</customData>\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectNumber unit=\"{LOCATION}\"/>\n\t\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<!--/***************************************************************************************************-->\n\t\t\t\t\t<!--Change icon, Key  and add content for Donut Chart-->\n\t\t\t\t\t<!--*****************************************************************************************************/-->\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://donut-chart\" id=\"iconTabBarFilter2\" key=\"analytics\" tooltip=\"{i18n>detailIconTabBarAttachments}\">\n\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t<viz:Popover id=\"idPopOver\"></viz:Popover>\n\t\t\t\t\t\t\t<viz:VizFrame id=\"idVizFrameDonut\" uiConfig=\"{applicationSet:'fiori'}\"></viz:VizFrame>\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</semantic:content>\n\t\t<semantic:sendEmailAction>\n\t\t\t<semantic:SendEmailAction id=\"shareEmail\" press=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\t\t<semantic:shareInJamAction>\n\t\t\t<semantic:ShareInJamAction id=\"shareInJam\" press=\"onShareInJamPress\" visible=\"{FLP>/isShareInJamActive}\"/>\n\t\t</semantic:shareInJamAction>\n\t\t<semantic:saveAsTileAction>\n\t\t\t<footerbar:AddBookmarkButton id=\"shareTile\" title=\"{detailView>/saveAsTileTitle}\"/>\n\t\t</semantic:saveAsTileAction>\n\t</semantic:DetailPage>\n</mvc:View>",
		"com/sap/sdc/hcp/bootcamp/view/Master.view.xml": "<mvc:View\n\t\tcontrollerName=\"com.sap.sdc.hcp.bootcamp.controller.Master\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns:core=\"sap.ui.core\"\n\t\txmlns=\"sap.m\"\n\t\txmlns:semantic=\"sap.m.semantic\">\n\n\t<semantic:MasterPage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{masterView>/title}\"\n\t\t\tnavButtonPress=\"onNavBack\"\n\t\t\tshowNavButton=\"true\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\tid=\"searchField\"\n\t\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\n\t\t\t\t\t\t\ttooltip=\"{i18n>masterSearchTooltip}\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\tsearch=\"onSearch\">\n\t\t\t\t\t</SearchField>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\n\t\t<semantic:content>\n\t\t\t<PullToRefresh\n\t\t\t\t\tid=\"pullToRefresh\"\n\t\t\t\t\tvisible=\"{device>/support/touch}\"\n\t\t\t\t\trefresh=\"onRefresh\" />\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List\n\t\t\t\t\tid=\"list\"\n\t\t\t\t\titems=\"{\n\t\t\t\t\t\tpath: '/Jobs',\n\t\t\t\t\t\tsorter: {\n\t\t\t\t\t\t\tpath: 'DESCRIPTION',\n\t\t\t\t\t\t\tdescending: false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupHeaderFactory: '.createGroupHeader'\n\t\t\t\t\t}\"\n\t\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\"\n\t\t\t\t\tnoDataText=\"{masterView>/noDataText}\"\n\t\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\"\n\t\t\t\t\tgrowing=\"true\"\n\t\t\t\t\tgrowingScrollToLoad=\"true\"\n\t\t\t\t\tupdateFinished=\"onUpdateFinished\"\n\t\t\t\t\tselectionChange=\"onSelectionChange\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\t\tactive=\"true\"\n\t\t\t\t\t\t\tid=\"filterBar\"\n\t\t\t\t\t\t\tvisible=\"{masterView>/isFilterBarVisible}\"\n\t\t\t\t\t\t\tpress=\"onOpenViewSettings\">\n\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\tid=\"filterBarLabel\"\n\t\t\t\t\t\t\t\ttext=\"{masterView>/filterBarLabel}\" />\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<!-- Custom Code -->\n\t\t\t\t\t<!-- Change formatter from '.formatter.currencyValue' to '.formatter.numberUnit' -->\n\t\t\t\t\t<ObjectListItem\n\t\t\t\t\t\t\ttype=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"\n\t\t\t\t\t\t\tpress=\"onSelectionChange\"\n\t\t\t\t\t\t\ttitle=\"{DESCRIPTION}\"\n\t\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\t\t\tpath: 'RemainingTime',\n\t\t\t\t\t\t\t\tformatter: '.formatter.numberUnit'\n\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\tnumberUnit=\"{RemainingTimeUnit}\">\n\t\t\t\t\t</ObjectListItem>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\n\t\t<semantic:sort>\n\t\t\t<semantic:SortSelect\n\t\t\t\t\tid=\"sort\"\n\t\t\t\t\tselectedKey=\"{masterView>/sortBy}\"\n\t\t\t\t\tchange=\"onSort\">\n\t\t\t\t<core:Item\n\t\t\t\t\t\tid=\"masterSort1\"\n\t\t\t\t\t\tkey=\"DESCRIPTION\"\n\t\t\t\t\t\ttext=\"{i18n>masterSort1}\"/>\n\t\t\t\t<core:Item\n\t\t\t\t\t\tid=\"masterSort2\"\n\t\t\t\t\t\tkey=\"RemainingTime\"\n\t\t\t\t\t\ttext=\"{i18n>masterSort2}\"/>\n\t\t\t</semantic:SortSelect>\n\t\t</semantic:sort>\n\n\t\t<semantic:filter>\n\t\t\t<semantic:FilterAction\n\t\t\t\t\tid=\"filter\"\n\t\t\t\t\tpress=\"onOpenViewSettings\" />\n\t\t</semantic:filter>\n\n\t\t<semantic:group>\n\t\t\t<semantic:GroupSelect\n\t\t\t\t\tid=\"group\"\n\t\t\t\t\tselectedKey=\"{masterView>/groupBy}\"\n\t\t\t\t\tchange=\"onGroup\">\n\t\t\t\t<core:Item\n\t\t\t\t\t\tid=\"masterGroupNone\"\n\t\t\t\t\t\tkey=\"None\"\n\t\t\t\t\t\ttext=\"{i18n>masterGroupNone}\"/>\n\t\t\t\t<core:Item\n\t\t\t\t\t\tid=\"masterGroup1\"\n\t\t\t\t\t\tkey=\"RemainingTime\"\n\t\t\t\t\t\ttext=\"{i18n>masterGroup1}\"/>\n\t\t\t</semantic:GroupSelect>\n\t\t</semantic:group>\n\n\t</semantic:MasterPage>\n\n</mvc:View>",
		"com/sap/sdc/hcp/bootcamp/Component.js": "sap.ui.define([\n\t\t\"sap/ui/core/UIComponent\",\n\t\t\"sap/ui/Device\",\n\t\t\"com/sap/sdc/hcp/bootcamp/model/models\",\n\t\t\"com/sap/sdc/hcp/bootcamp/controller/ListSelector\",\n\t\t\"com/sap/sdc/hcp/bootcamp/controller/ErrorHandler\"\n\t], function (UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\t\"use strict\";\n\n\t\treturn UIComponent.extend(\"com.sap.sdc.hcp.bootcamp.Component\", {\n\n\t\t\tmetadata : {\n\t\t\t\tmanifest : \"json\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t\t * @public\n\t\t\t * @override\n\t\t\t */\n\t\t\tinit : function () {\n\t\t\t\tthis.oListSelector = new ListSelector();\n\t\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t\t// set the device model\n\t\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t\t// set the FLP model\n\t\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t\t// call the base component's init function and create the App view\n\t\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t\t// create the views based on the url/hash\n\t\t\t\tthis.getRouter().initialize();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * The component is destroyed by UI5 automatically.\n\t\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t\t * @public\n\t\t\t * @override\n\t\t\t */\n\t\t\tdestroy : function () {\n\t\t\t\tthis.oListSelector.destroy();\n\t\t\t\tthis._oErrorHandler.destroy();\n\t\t\t\t// call the base component's destroy function\n\t\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t\t * @public\n\t\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t\t */\n\t\t\tgetContentDensityClass : function() {\n\t\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this._sContentDensityClass;\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/model/models.js": "sap.ui.define([\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/ui/Device\"\n\t], function (JSONModel, Device) {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\tcreateDeviceModel : function () {\n\t\t\t\tvar oModel = new JSONModel(Device);\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t},\n\n\t\t\tcreateFLPModel : function () {\n\t\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\t\toModel = new JSONModel({\n\t\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t\t});\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/controller/ErrorHandler.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\",\n\t\t\"sap/m/MessageBox\"\n\t], function (UI5Object, MessageBox) {\n\t\t\"use strict\";\n\n\t\treturn UI5Object.extend(\"com.sap.sdc.hcp.bootcamp.controller.ErrorHandler\", {\n\n\t\t\t/**\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t\t * @class\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t\t * @public\n\t\t\t * @alias com.sap.sdc.hcp.bootcamp.controller.ErrorHandler\n\t\t\t */\n\t\t\tconstructor : function (oComponent) {\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\t\tthis._oComponent = oComponent;\n\t\t\t\tthis._oModel = oComponent.getModel();\n\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\t\tthis._oModel.attachMetadataFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t\t}, this);\n\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t\t * The user can try to refresh the metadata.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showMetadataError : function (sDetails) {\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"metadataErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function (sAction) {\n\t\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t\t * Only the first error message will be display.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showServiceError : function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/controller/ListSelector.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\"\r\n\t], function (BaseObject) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseObject.extend(\"com.sap.sdc.hcp.bootcamp.model.ListSelector\", {\r\n\r\n\t\t\t/**\r\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\r\n\t\t\t * function.\r\n\t\t\t * @class\r\n\t\t\t * @public\r\n\t\t\t * @alias com.sap.sdc.hcp.bootcamp.model.ListSelector\r\n\t\t\t */\r\n\r\n\t\t\tconstructor : function () {\r\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHasBeenSet) {\r\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\r\n\t\t\t\t// invoke selectItem functions before calling setBoundMasterList\r\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\r\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\r\n\t\t\t\t\tthis._oWhenListHasBeenSet\r\n\t\t\t\t\t\t.then(function (oList) {\r\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\r\n\t\t\t\t\t\t\t\tfunction (oData) {\r\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\terror : true\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\r\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\r\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\r\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\r\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\r\n\t\t\t\t\t\t\t\t\t\tfnResolve({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// No items in the list\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\terror : false\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\r\n\t\t\t * May only be invoked once per ListSelector instance.\r\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tsetBoundMasterList : function (oList) {\r\n\t\t\t\tthis._oList = oList;\r\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\r\n\t\t\t},\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\r\n\t\t\t * no selection/scrolling will happen\r\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tselectAListItem : function (sBindingPath) {\r\n\r\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tvar oList = this._oList,\r\n\t\t\t\t\t\t\toSelectedItem;\r\n\r\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\r\n\r\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\r\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\r\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\r\n\t\t\t\t\t\t\t\toList.setSelectedItem(oItem);\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}.bind(this),\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" because the list encountered an error or had no items\");\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* Convenience Functions for List Selection Change Event       */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\r\n\t\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\r\n\t\t\t * @param {function} oListener the listener object\r\n\t\t\t * @return {com.sap.sdc.hcp.bootcamp.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\r\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\r\n\t\t\t * @param {function} oListener the listener object\r\n\t\t\t * @return {com.sap.sdc.hcp.bootcamp.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tdetachListSelectionChange : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Removes all selections from master list.\r\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tclearMasterListSelection : function () {\r\n\t\t\t\t//use promise to make sure that 'this._oList' is available\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.removeSelections(true);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"com/sap/sdc/hcp/bootcamp/controller/App.controller.js": "sap.ui.define([\n\t\t\"com/sap/sdc/hcp/bootcamp/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\"\n\t], function (BaseController, JSONModel) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"com.sap.sdc.hcp.bootcamp.controller.App\", {\n\n\t\t\tonInit : function () {\n\t\t\t\tvar oViewModel,\n\t\t\t\t\tfnSetAppNotBusy,\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tbusy : true,\n\t\t\t\t\tdelay : 0\n\t\t\t\t});\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t\t};\n\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t\t// after a new list entry has been selected.\n\t\t\t\toListSelector.attachListSelectionChange(function () {\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t\t}, this);\n\n\t\t\t\t// apply content density mode to root view\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\t\tcontrollerName=\"com.sap.sdc.hcp.bootcamp.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"com/sap/sdc/hcp/bootcamp/view/App.view.xml": "<mvc:View\n\t\tcontrollerName=\"com.sap.sdc.hcp.bootcamp.controller.App\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\tdisplayBlock=\"true\"\n\t\tbusy=\"{appView>/busy}\"\n\t\tbusyIndicatorDelay=\"{appView>/delay}\"\n\t\txmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\" />\n</mvc:View>",
		"com/sap/sdc/hcp/bootcamp/view/NotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"com.sap.sdc.hcp.bootcamp.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\t\ttext=\"{i18n>notFoundText}\"\n\t\t\ticon=\"{sap-icon://document}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"com/sap/sdc/hcp/bootcamp/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\n\t\txmlns=\"sap.m\"\n\t\txmlns:core=\"sap.ui.core\">\n\n\t<ViewSettingsDialog\n\t\t\tid=\"viewSettingsDialog\"\n\t\t\tconfirm=\"onConfirmViewSettingsDialog\"\n\t\t\tresetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem\n\t\t\t\t\tid=\"filterItems\"\n\t\t\t\t\ttext=\"{i18n>masterFilterName}\"\n\t\t\t\t\tkey=\"Price\"\n\t\t\t\t\tmultiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\n\t\t\t\t\t\t\tkey=\"Filter1\"\n\t\t\t\t\t\t\tid=\"viewFilter1\"/>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\n\t\t\t\t\t\t\tkey=\"Filter2\"\n\t\t\t\t\t\t\tid=\"viewFilter2\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n\n</core:FragmentDefinition>",
		"com/sap/sdc/hcp/bootcamp/localService/mockserver.js": "sap.ui.define([\n\t\t\"sap/ui/core/util/MockServer\"\n\t], function (MockServer) {\n\t\t\"use strict\";\n\n\t\tvar oMockServer,\n\t\t\t_sAppModulePath = \"com/sap/sdc/hcp/bootcamp/\",\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Initializes the mock server.\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t\t * @public\n\t\t\t */\n\n\t\t\tinit : function () {\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\t\tsEntity = \"Jobs\",\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t\t// ensure there is a trailing slash\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\t\toMockServer = new MockServer({\n\t\t\t\t\trootUri : sMockServerUrl\n\t\t\t\t});\n\n\t\t\t\t// configure mock server with a delay of 1s\n\t\t\t\tMockServer.config({\n\t\t\t\t\tautoRespond : true,\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t\t});\n\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\n\t\t\t\t\tbGenerateMissingMockData : true\n\t\t\t\t});\n\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\n\t\t\t\t\t\taRequest.response = function(oXhr){\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t// handling the metadata error test\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Handling request errors\n\t\t\t\tif (sErrorParam) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\toMockServer.start();\n\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t\t */\n\t\t\tgetMockServer : function () {\n\t\t\t\treturn oMockServer;\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"com/sap/sdc/hcp/bootcamp/view/DetailObjectNotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"com.sap.sdc.hcp.bootcamp.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>detailTitle}\"\n\t\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>"
	}
});